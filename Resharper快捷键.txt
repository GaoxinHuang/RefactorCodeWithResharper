Resharper 快捷键

1.	Ctrl + B: 切到 Implementation (定义的地方, 不管任何地方)
2.	Ctrl + W: 把附近的代码靠近选上(按块的选中), 不停的按会扩大范围
3.	Alt+ F7: 找到所有 references
4.	Ctrl + Shift + W: 减少选中的范围
5.	Ctrl + T, D: debug test代码
6.	快速找到 todo: View -> Task List -> Description 改成 Comment 
7.	移动整段代码移动到当前上面的方法的上面:	选中整个方法 -> Shift + Ctrl + up (小键盘的上)

Resharper 的 Refactor 使用
1.	Ctrl + Shift + R -> Safe Delete : 安全删除 方法或class的属性, 比如
public void Call(int a, int b){ ... } 
用 Safe Delete b 会把 其他地方有第二个参数的 Call 的第二个参数去掉 
注: 推荐在用这个之前, 看看resharper 是否提示 从没用过 在方法中

2.	extract method中code再生产 method (右键-> refactor -> extract method):	Ctrl + Alt + M 

3.	提取方法参数, 组合成一个class:	选中方法名 + 右键-> Refactor -> Extract Class From Parameters
(可以选择Class/Structure, 还有选择生成代码的地方: Top-level / Nested)
注: Resharper 会自动把那些方法参数和使用的地方在代码里代替, 而且会生成一个 get的方法

4.	在3的情况下, 可能要修改的地方很多. 实际操作如下:
(1).	可以先用3生成 别的class
(2).	然后再用 change signature 去修改, 如下
选中方法名 + 右键-> Refactor -> Change signature -> 就可以改 parameter type 和  parameter name
注:	change signature 还可以改变 parameter的顺序
(3).	删除掉 3 之前 生成的, 但是现在不用的

5.	将 out parameter 转成 Tuple, 而这个out parameter 就加到这里面:
	操作:	右键 -> Refactor -> Transform Out parameter -> 确定
	注: Refactor 还会将有用到这个方法的地方 -> 改成 Tuple.Item1, Tuple.Item2
	
6.	选中Variable name -> Refactore -> Inline Variable -> 将申明完直接赋值的去掉, 通常用于只用一次的 variable.  比如 
	var a = db.value; //将这段代码去掉, a的部分全部由 db.value 来代替
	for(int i; i< a; i++){... }  

7.	提取property到新的class里: 	选中 property fields -> 右键 -> Refactor -> Extracted class -> 填写 Extracted class: Name, 将每个field 前面禁止的iconm -> Make public

8.	移到方法到不同的class里: 	选中方法名 -> 右键 -> Refactor -> Move Instance Method -> 选中想要移到的 class 底下

9.	提取 方法或property 变成 abstract 给子类去实现:	选中方法名 -> 右键 -> Push Members Down -> 在想要提取的方法里 abstract 的框里打钩 