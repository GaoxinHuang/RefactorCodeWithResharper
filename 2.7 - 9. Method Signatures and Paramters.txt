L7.	Poor method Signatures
一.	Method 中有 if condition, 然后代码很长 
1.	可以把 if condition分离, 比如
public User GetUser(string username, string pwd, bool isLogin)
{
	if(isLogin)
	{
		.....
	}else
	{
		.....
	}
}
就可以把这个 isLogin去掉, 分成 
public User Login(string username, string pwd){ ... } 
public User GetUser(string username, string pwd) { ... }
 
二.	总结
写方法要注意点:
1.	Check the return type - 是否有意义, 比如都是return true, 或者return的内容和 method 不符号 
2.	Check the method name - method name 和 实际操作不符号
3.	Check the parameters  - parameters 是否有意义


L8 Method 有 long parameter 
一.	将long parameter 和 重复的parameter, 可以组成一个 class, 比如
public void GetReservations (DateTime dateFrom, DateTime dateTo, User user, int locationId, LocationType locationType, int? customerId)


注: 其他方法里也有很多 DateTime dateFrom, DateTime dateTo

1.	先将重复多的合成一个 DateRang, 比如 dateFrom 和 dateTo 可以组合成 DateRange, 如下
public DateRange
{
	public DateTime DateFrom {get;set}
	public DateTime DateTo {get;set}
}

2.	将全部参数整成一个 (教程中有重复用到两次, 所以全部整成一个)
public class ReservationsQuery 
{
	public DateTime DateFrom {get;set;}
	public DateTime DateTo {get;set;}
	User user{get;set;}
	int locationId {get;set;}
	LocationType locationType {get;set;} 
	int? customerId {get;set;}
}

二.	总结
1.	方法参数最好不要超过3个

L9	Output parameter
一.	原代码:
public IEnumerable<Customer> GetCustomers(int pageIdex, out int totalCount)
{
	//注: return的是当前页的customers, out 是 total的数
}

二.	优化方法
1.: 用refactor -> 变成 Tuple (一种 data tructure, 可以有多个fields), 如下
public Tuple<IEnumerable<Customer>, int> GetCustomers(int pageIdex, out int totalCount)
{	...	}
注: Refactor 还会将有用到这个方法的地方 -> 改成 Tuple.Item1, Tuple.Item2

2.	进步一优化 - 创建一个class 去包括 IEnumerable<Customer> 和 totalCount. 

3.	然后用 refactore 去change signature 

注: 这里由于是先建的tuple, 所以后面建的class 的field 要叫 Item1 和 Item2. 
	change signature后, 再去 rename Item1 和 Item2


额外4. 选中Variable name -> Refactore -> Inline Variable -> 将只使用一次的 Variable, 但是赋值很复杂的操作合成一个

三.	总结
1.	尽量避免 output parameter, 将他们整合到 return object里 
2.	如果只用一次的 local variable, 可以考虑怎么去 refactore 它. (真的需要 申明吗)